// Verificar el estado del an√°lisis para ver si pas√≥ por la validaci√≥n
const checkAnalysisStatus = async () => {
  try {
    const response = await fetch('http://localhost:9999/analysis/B2q50Y4gretS0asG8veL');
    const html = await response.text();
    
    // Buscar indicadores de que pas√≥ por validaci√≥n
    const validationIndicators = [
      'status: \'rejected\'',
      'rejectionReason',
      'validationResult',
      'Video rechazado',
      'No contiene contenido v√°lido de baloncesto'
    ];
    
    let foundValidation = false;
    validationIndicators.forEach(indicator => {
      if (html.includes(indicator)) {
        foundValidation = true;
        console.log(`‚úÖ ENCONTRADO INDICADOR DE VALIDACI√ìN: "${indicator}"`);
      }
    });
    
    if (foundValidation) {
      console.log('\n‚úÖ RESULTADO: El video S√ç pas√≥ por validaci√≥n y fue rechazado');
      console.log('   Pero a√∫n as√≠ se mostr√≥ un an√°lisis. Hay un bug en la UI.');
    } else {
      console.log('\n‚ùå RESULTADO: El video NO pas√≥ por validaci√≥n');
      console.log('   El flujo de procesamiento no est√° ejecutando la validaci√≥n.');
    }
    
    // Verificar si es an√°lisis simulado
    const simulatedPatterns = [
      'An√°lisis b√°sico',
      'Verifica la GEMINI_API_KEY',
      'No se pudo ejecutar la IA'
    ];
    
    let isSimulated = false;
    simulatedPatterns.forEach(pattern => {
      if (html.includes(pattern)) {
        isSimulated = true;
        console.log(`‚ùå AN√ÅLISIS SIMULADO: "${pattern}"`);
      }
    });
    
    if (isSimulated) {
      console.log('\nüö® PROBLEMA: An√°lisis simulado - La IA fall√≥ y us√≥ el fallback');
    } else {
      console.log('\nü§î PROBLEMA: An√°lisis real - La IA analiz√≥ un video de fiesta como baloncesto');
    }
    
  } catch (error) {
    console.log('‚ùå Error al verificar an√°lisis:', error.message);
  }
};

checkAnalysisStatus();

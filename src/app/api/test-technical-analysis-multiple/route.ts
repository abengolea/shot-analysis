import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

export const dynamic = 'force-dynamic';

export async function POST(request: NextRequest) {
  try {
    console.log('[TECHNICAL-MULTIPLE] Iniciando an√°lisis t√©cnico m√∫ltiple...');
    
    const formData = await request.formData();
    const file = formData.get('video') as File;

    if (!file) {
      return NextResponse.json({ error: 'No se proporcion√≥ archivo de video' }, { status: 400 });
    }

    // Validar tama√±o del archivo (m√°ximo 20MB)
    const maxSize = 20 * 1024 * 1024; // 20MB
    if (file.size > maxSize) {
      return NextResponse.json({ 
        error: 'Archivo muy grande. M√°ximo 20MB permitido.' 
      }, { status: 400 });
    }

    console.log('[TECHNICAL-MULTIPLE] Archivo validado:', file.name, file.size, 'bytes');

    // Configurar Gemini
    const genAI = new GoogleGenerativeAI(
      process.env.GEMINI_API_KEY || 
      process.env.GOOGLE_API_KEY || 
      process.env.GOOGLE_GENAI_API_KEY || 
      'AIzaSyBYvIGN0-Yd1b7LG2Seg6VwfKnTYIo4n_4'
    );
    
    const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

    // Convertir el archivo a base64
    const arrayBuffer = await file.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);
    const base64 = buffer.toString('base64');
    const mimeType = file.type || 'video/mp4';

    console.log('[TECHNICAL-MULTIPLE] Ejecutando 3 an√°lisis del mismo video...');

    const prompt = `
    Eres un entrenador experto de baloncesto. Analiza este video de lanzamiento y eval√∫a los 22 par√°metros t√©cnicos del tiro.

    üéØ SISTEMA DE PESOS ACTUALIZADO (para calcular score_global):
    - FLUIDEZ: 50% peso (CR√çTICO - m√°s importante)
    - RESTO DE CATEGOR√çAS: 26.38% peso (ALTO)
    - SET POINT: 8.27% peso (MEDIO)
    - CODO: 7.24% peso (MEDIO) 
    - MANO LIBERACI√ìN: 3.26% peso (BAJO)
    - MANO ASCENSO: 2.18% peso (BAJO)

    INSTRUCCIONES CR√çTICAS:
    - Analiza SOLO lo que puedes VER claramente en el video
    - NO inventes mediciones que no puedes determinar
    - Si no puedes ver algo claramente, usa un score bajo (3-5)
    - S√© conservador en tus evaluaciones
    - Da feedback espec√≠fico basado en lo que realmente ves

    EVAL√öA ESTOS 22 PAR√ÅMETROS (del 1-10):

    PREPARACI√ìN:
    1. Alineaci√≥n de pies con el aro (¬øpies paralelos al aro?)
    2. Alineaci√≥n del cuerpo (¬øcuerpo cuadrado al aro?)
    3. Mu√±eca cargada hacia atr√°s (¬ømu√±eca preparada?)
    4. Flexi√≥n de rodillas (¬ørodillas flexionadas 45-70¬∞?)
    5. Hombros relajados (¬øhombros no tensos?)
    6. Mirada enfocada al aro (¬ømira al aro?)

    ASCENSO:
    7. Mano no dominante gu√≠a el bal√≥n (¬ømano gu√≠a visible?) - PESO: 2.18%
    8. Codos cerca del cuerpo (¬øcodos no abiertos?) - PESO: 7.24%
    9. Bal√≥n sube en l√≠nea recta (¬øtrayectoria recta?)
    10. Trayectoria suave al set point (¬ømovimiento fluido?)
    11. Set point sobre la cabeza (¬øbal√≥n sobre cabeza?) - PESO: 8.27%
    12. Timing correcto (¬øno muy r√°pido/lento?)

    FLUIDEZ (PESO: 50% - CR√çTICO):
    13. Tiro en un solo movimiento continuo (¬ømovimiento fluido?)
    14. Sincronizaci√≥n piernas-brazos (¬øtodo junto?)

    LIBERACI√ìN:
    15. Mano gu√≠a se retira a tiempo (¬ømano gu√≠a se quita?) - PESO: 3.26%
    16. Extensi√≥n completa del brazo (¬øbrazo extendido?)
    17. Mu√±eca con snap hacia abajo (¬ømu√±eca activa?)
    18. √Ångulo de salida apropiado (¬ø√°ngulo bueno?)

    SEGUIMIENTO:
    19. Mantiene follow-through (¬øfollow-through visible?)
    20. Equilibrio al aterrizar (¬øaterriza equilibrado?)
    21. Duraci√≥n del follow-through (¬ømantiene 1-2 seg?)
    22. Consistencia general del movimiento (¬ømovimiento consistente?)

    üìã REGLAS PARA RECOMENDACIONES AUTOM√ÅTICAS (por peso):
    - Si FLUIDEZ < 7: PRIORIDAD M√ÅXIMA (50% peso)
    - Si SET POINT < 6: PRIORIDAD ALTA (8.27% peso)
    - Si CODO < 6: PRIORIDAD ALTA (7.24% peso)
    - Si MANO LIBERACI√ìN < 5: PRIORIDAD MEDIA (3.26% peso)
    - Si MANO ASCENSO < 5: PRIORIDAD MEDIA (2.18% peso)

    üìã REGLAS PARA FORTALEZAS AUTOM√ÅTICAS (por peso):
    - Si FLUIDEZ ‚â• 8: fortaleza PRINCIPAL
    - Si SET POINT ‚â• 8: fortaleza SECUNDARIA
    - Si CODO ‚â• 8: fortaleza SECUNDARIA
    - Otros par√°metros ‚â• 8: fortalezas terciarias

    RESPONDE √öNICAMENTE CON JSON V√ÅLIDO:
    {
      "preparacion": {
        "alineacion_pies": {"score": 8, "feedback": "Pies bien alineados con el aro"},
        "alineacion_cuerpo": {"score": 7, "feedback": "Cuerpo ligeramente desalineado"},
        "muneca_cargada": {"score": 6, "feedback": "Mu√±eca no completamente cargada"},
        "flexion_rodillas": {"score": 8, "feedback": "Buena flexi√≥n de rodillas"},
        "hombros_relajados": {"score": 9, "feedback": "Hombros muy relajados"},
        "mirada_enfoque": {"score": 8, "feedback": "Mira directamente al aro"}
      },
      "ascenso": {
        "mano_guia": {"score": 7, "feedback": "Mano gu√≠a presente pero no ideal"},
        "codos_cuerpo": {"score": 8, "feedback": "Codos bien posicionados"},
        "balon_recto": {"score": 7, "feedback": "Trayectoria ligeramente curva"},
        "trayectoria_suave": {"score": 8, "feedback": "Movimiento suave"},
        "set_point": {"score": 6, "feedback": "Set point un poco bajo"},
        "timing": {"score": 8, "feedback": "Timing correcto"}
      },
      "fluidez": {
        "movimiento_continuo": {"score": 8, "feedback": "Movimiento fluido"},
        "sincronizacion": {"score": 7, "feedback": "Buena sincronizaci√≥n"}
      },
      "liberacion": {
        "mano_guia_retira": {"score": 6, "feedback": "Mano gu√≠a se retira tarde"},
        "extension_completa": {"score": 8, "feedback": "Buena extensi√≥n"},
        "muneca_snap": {"score": 7, "feedback": "Snap de mu√±eca presente"},
        "angulo_salida": {"score": 8, "feedback": "√Ångulo de salida bueno"}
      },
      "seguimiento": {
        "follow_through": {"score": 9, "feedback": "Excelente follow-through"},
        "equilibrio_aterrizaje": {"score": 8, "feedback": "Aterriza equilibrado"},
        "duracion_follow": {"score": 7, "feedback": "Follow-through adecuado"},
        "consistencia": {"score": 8, "feedback": "Movimiento consistente"}
      },
      "score_global": 7.5,
      "principales_mejoras": ["Mejoras ordenadas por peso/importancia seg√∫n scores"],
      "principales_fortalezas": ["Fortalezas ordenadas por peso/importancia seg√∫n scores"]
    }
    `;

    // Ejecutar las 3 pruebas
    const [response1, response2, response3] = await Promise.all([
      model.generateContent([prompt, { inlineData: { data: base64, mimeType: mimeType } }]),
      model.generateContent([prompt, { inlineData: { data: base64, mimeType: mimeType } }]),
      model.generateContent([prompt, { inlineData: { data: base64, mimeType: mimeType } }])
    ]);

    const text1 = response1.response.text();
    const text2 = response2.response.text();
    const text3 = response3.response.text();

    console.log('[TECHNICAL-MULTIPLE] Respuestas recibidas:');
    console.log('[TECHNICAL-MULTIPLE] Respuesta 1:', text1);
    console.log('[TECHNICAL-MULTIPLE] Respuesta 2:', text2);
    console.log('[TECHNICAL-MULTIPLE] Respuesta 3:', text3);

    // Parsear las respuestas
    const parseResponse = (text: string) => {
      try {
        const jsonMatch = text.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          return JSON.parse(jsonMatch[0]);
        }
      } catch (e) {
        console.log('[TECHNICAL-MULTIPLE] Error parseando respuesta:', e);
      }
      return null;
    };

    const result1 = parseResponse(text1);
    const result2 = parseResponse(text2);
    const result3 = parseResponse(text3);

    // Analizar consistencia
    const consistency = analyzeConsistency(result1, result2, result3);

    console.log('[TECHNICAL-MULTIPLE] An√°lisis de consistencia:', consistency);

    return NextResponse.json({
      success: true,
      videoName: file.name,
      result: {
        consistency: consistency,
        tests: {
          test1: result1 || createFallbackResult(),
          test2: result2 || createFallbackResult(),
          test3: result3 || createFallbackResult()
        }
      },
      timestamp: new Date().toISOString()
    });

  } catch (error: any) {
    console.error('[TECHNICAL-MULTIPLE] Error en an√°lisis t√©cnico m√∫ltiple:', error?.message || error);
    return NextResponse.json({ 
      success: false,
      videoName: 'archivo desconocido',
      result: {
        consistency: {
          isConsistent: false,
          evidence: ['Error t√©cnico'],
          confidence: 0
        },
        tests: {
          test1: createFallbackResult(),
          test2: createFallbackResult(),
          test3: createFallbackResult()
        }
      },
      timestamp: new Date().toISOString(),
      error: error?.message || 'Error desconocido'
    }, { status: 500 });
  }
}

function createFallbackResult() {
  return {
    preparacion: {
      alineacion_pies: { score: 0, feedback: 'Error en an√°lisis' },
      alineacion_cuerpo: { score: 0, feedback: 'Error en an√°lisis' },
      muneca_cargada: { score: 0, feedback: 'Error en an√°lisis' },
      flexion_rodillas: { score: 0, feedback: 'Error en an√°lisis' },
      hombros_relajados: { score: 0, feedback: 'Error en an√°lisis' },
      mirada_enfoque: { score: 0, feedback: 'Error en an√°lisis' }
    },
    ascenso: {
      mano_guia: { score: 0, feedback: 'Error en an√°lisis' },
      codos_cuerpo: { score: 0, feedback: 'Error en an√°lisis' },
      balon_recto: { score: 0, feedback: 'Error en an√°lisis' },
      trayectoria_suave: { score: 0, feedback: 'Error en an√°lisis' },
      set_point: { score: 0, feedback: 'Error en an√°lisis' },
      timing: { score: 0, feedback: 'Error en an√°lisis' }
    },
    fluidez: {
      movimiento_continuo: { score: 0, feedback: 'Error en an√°lisis' },
      sincronizacion: { score: 0, feedback: 'Error en an√°lisis' }
    },
    liberacion: {
      mano_guia_retira: { score: 0, feedback: 'Error en an√°lisis' },
      extension_completa: { score: 0, feedback: 'Error en an√°lisis' },
      muneca_snap: { score: 0, feedback: 'Error en an√°lisis' },
      angulo_salida: { score: 0, feedback: 'Error en an√°lisis' }
    },
    seguimiento: {
      follow_through: { score: 0, feedback: 'Error en an√°lisis' },
      equilibrio_aterrizaje: { score: 0, feedback: 'Error en an√°lisis' },
      duracion_follow: { score: 0, feedback: 'Error en an√°lisis' },
      consistencia: { score: 0, feedback: 'Error en an√°lisis' }
    },
    score_global: 0,
    principales_mejoras: ['Error en an√°lisis'],
    principales_fortalezas: ['Error en an√°lisis']
  };
}

function analyzeConsistency(result1: any, result2: any, result3: any): { isConsistent: boolean; evidence: string[]; confidence: number } {
  const evidence: string[] = [];
  let isConsistent = true;
  let confidence = 0.5;

  if (!result1 || !result2 || !result3) {
    return {
      isConsistent: false,
      evidence: ['Error en el parsing de las respuestas'],
      confidence: 0
    };
  }

  // Comparar scores globales
  const globalScore1 = result1.score_global || 0;
  const globalScore2 = result2.score_global || 0;
  const globalScore3 = result3.score_global || 0;

  const globalDifference = Math.max(
    Math.abs(globalScore1 - globalScore2),
    Math.abs(globalScore1 - globalScore3),
    Math.abs(globalScore2 - globalScore3)
  );

  if (globalDifference <= 0.5) {
    evidence.push('Scores globales muy consistentes (diferencia ‚â§ 0.5)');
    confidence += 0.3;
  } else if (globalDifference <= 1.0) {
    evidence.push('Scores globales moderadamente consistentes (diferencia ‚â§ 1.0)');
    confidence += 0.2;
  } else {
    evidence.push('Scores globales inconsistentes (diferencia > 1.0)');
    isConsistent = false;
    confidence -= 0.3;
  }

  // Comparar par√°metros espec√≠ficos
  const categories = ['preparacion', 'ascenso', 'fluidez', 'liberacion', 'seguimiento'];
  let totalParameters = 0;
  let consistentParameters = 0;

  for (const category of categories) {
    if (result1[category] && result2[category] && result3[category]) {
      for (const param of Object.keys(result1[category])) {
        totalParameters++;
        const score1 = result1[category][param]?.score || 0;
        const score2 = result2[category][param]?.score || 0;
        const score3 = result3[category][param]?.score || 0;

        const paramDifference = Math.max(
          Math.abs(score1 - score2),
          Math.abs(score1 - score3),
          Math.abs(score2 - score3)
        );

        if (paramDifference <= 1) {
          consistentParameters++;
        }
      }
    }
  }

  const consistencyRatio = totalParameters > 0 ? consistentParameters / totalParameters : 0;

  if (consistencyRatio >= 0.8) {
    evidence.push(`Alta consistencia en par√°metros individuales (${Math.round(consistencyRatio * 100)}%)`);
    confidence += 0.3;
  } else if (consistencyRatio >= 0.6) {
    evidence.push(`Moderada consistencia en par√°metros individuales (${Math.round(consistencyRatio * 100)}%)`);
    confidence += 0.1;
  } else {
    evidence.push(`Baja consistencia en par√°metros individuales (${Math.round(consistencyRatio * 100)}%)`);
    isConsistent = false;
    confidence -= 0.2;
  }

  // Verificar si las mejoras y fortalezas son similares
  const improvements1 = result1.principales_mejoras || [];
  const improvements2 = result2.principales_mejoras || [];
  const improvements3 = result3.principales_mejoras || [];

  const strengths1 = result1.principales_fortalezas || [];
  const strengths2 = result2.principales_fortalezas || [];
  const strengths3 = result3.principales_fortalezas || [];

  const improvementsSimilar = areArraysSimilar([improvements1, improvements2, improvements3]);
  const strengthsSimilar = areArraysSimilar([strengths1, strengths2, strengths3]);

  if (improvementsSimilar && strengthsSimilar) {
    evidence.push('Mejoras y fortalezas consistentes entre pruebas');
    confidence += 0.2;
  } else {
    evidence.push('Mejoras y fortalezas inconsistentes entre pruebas');
    isConsistent = false;
    confidence -= 0.1;
  }

  confidence = Math.max(0, Math.min(1, confidence));

  return {
    isConsistent,
    evidence,
    confidence
  };
}

function areArraysSimilar(arrays: string[][]): boolean {
  if (arrays.length < 2) return true;
  
  const allItems = arrays.flat();
  const uniqueItems = new Set(allItems);
  
  // Si hay muchos elementos √∫nicos, no son similares
  return uniqueItems.size / allItems.length <= 0.7;
}
